select Distinct H.HIRE_ID,
    JP.COMPANY_ID,
    JP.JOB_POSTING_ID,
    JP.POSTING_NUMBER AS BOUNTYJOBS_ID,
    JP.TITLE,
    JP.WORKFLOW_HANDLER_NAME,
    JP.RETAINED_FLAG,
	HM.FIRST_NAME || ' ' || HM.LAST_NAME as HIRING_MANAGER_NAME,
	LOWER(HM.EMAIL_ADDRESS) as HIRING_MANAGER_EMAIL,
    H.SUBMISSION_ID,
    H.CREATED_BY,
    H.CREATION_DATE,
    H.MODIFIED_BY,
    H.MODIFIED_DATE,
    H.COMP_OWNER_ID AS COMPENSATION_OWNER_ID,
    P.PAYMENT_STATUS AS ADJUSTED_PAYMENT_STATUS,
    ADDR.COUNTRY AS AWARD_ADDRESS_COUNTRY,
    ADDR.STATE AS AWARD_ADDRESS_STATE,
    ADDR.CITY AS AWARD_ADDRESS_CITY,
    HMC.PAYMENT_TERM AS COMPANY_PAYMENT_TERM,
    DATEADD(day, HMC.PAYMENT_TERM, H.HIRE_DATE) AS ON_TIME_PAYMENT_DATE,
	CASE WHEN P.PAYMENT_STATUS = 'P' THEN
    CASE WHEN P.COUNT_AS_ON_TIME = 'Y' OR H.HIRE_DATE IS NULL THEN 'Paid - On Time'
    WHEN P.LAST_PAYMENT_DATE > DATEADD(day, HMC.PAYMENT_TERM, H.HIRE_DATE) THEN 'Paid - Late'
    ELSE 'Paid - On Time' END
	WHEN P.PAYMENT_STATUS = 'R' THEN 'Refunded'
	WHEN P.PAYMENT_STATUS = 'U' THEN 'Unpaid'
	ELSE NULL END AS UNADJUSTED_PAYMENT_STATUS,
    H.CURRENCY_CODE,
	case when JP.CURRENCY_CODE = 'USD' then 
      (case when H.HIRE_DATE > CURRENT_DATE then JP.CREATION_DATE else H.HIRE_DATE end)
      else
      (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE) else (SELECT CR.EFFECTIVE_DATE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE) else (SELECT CR.EFFECTIVE_DATE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end as CURRENCY_CONVERSION_DATE,
	  round((case when JP.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end),2) AS CURRENCY_CONVERSION_RATE,
	  (SELECT SUM(CASE WHEN A.ACCOUNT_TYPE_CODE = 'D' THEN AE.AMOUNT ELSE -AE.AMOUNT END)
     FROM bounty_jobs.TRANSACTION T
              JOIN bounty_jobs.ACCOUNT_ENTRY AE
                   ON AE.TRANSACTION_ID = T.ID
              JOIN bounty_jobs.ACCOUNT A
                   ON A.ID = AE.ACCOUNT_ID
                       AND A.ACCOUNT_CHART_TYPE_ID IN (1, 2, 4)
              JOIN bounty_jobs.COMPANY C
                   ON C.COMPANY_ID = A.COMPANY_ID
                       AND C.COMPANY_TYPE_CODE = 'E'
     WHERE T.SUBMISSION_ID = H.SUBMISSION_ID
       AND T.TRANSACTION_TYPE_ID IN (6, 12, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 40)) AS FEE_AMOUNT,
       (ROUND(((SELECT SUM(CASE WHEN A.ACCOUNT_TYPE_CODE = 'D' THEN AE.AMOUNT ELSE -AE.AMOUNT END)
             FROM bounty_jobs.TRANSACTION T
                      JOIN bounty_jobs.ACCOUNT_ENTRY AE
                           ON AE.TRANSACTION_ID = T.ID
                      JOIN bounty_jobs.ACCOUNT A
                           ON A.ID = AE.ACCOUNT_ID
                               AND A.ACCOUNT_CHART_TYPE_ID IN (1, 2, 4)
                      JOIN bounty_jobs.COMPANY C
                           ON C.COMPANY_ID = A.COMPANY_ID
                               AND C.COMPANY_TYPE_CODE = 'E'
             WHERE T.SUBMISSION_ID = H.SUBMISSION_ID
               AND T.TRANSACTION_TYPE_ID IN (6, 12, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 40)) * (case when H.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end)), 2)) AS FEE_AMOUNT_USD_CONVERTED,
	H.SALARY_PERCENT_AWARD,
    H.SALARY,
	((ROUND((H.SALARY * (
    case when H.CURRENCY_CODE = 'USD' then 1 else
    (case when H.HIRE_DATE > CURRENT_DATE then 
    (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
            WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
              AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
              AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
            ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end
          )
	  end)), 2))) AS SALARY_USD_CONVERTED,
	H.HIRE_DATE AS CANDIDATE_START_DATE,
    H.PURCHASE_ORDER,
    H.AWARD,
	(ROUND((H.AWARD * (case when H.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end)), 2)) AS AWARD_USD_CONVERTED,
	P.PAID_OUTSIDE,
    PS.DESCRIPTION AS PAYMENT_STATUS,
    P.INVOICE_NUMBER,
    ASTAT.DESCRIPTION AS AWARD_STATUS,
    P.CREATION_DATE AS PAYMENT_DATE,
    P.CREATED_BY AS PAYMENT_CREATOR_ID,
    P.MODIFIED_BY AS PAYMENT_MODIFIER_ID,
    P.MODIFIED_DATE AS PAYMENT_MODIFICATION_DATE,
    P.LAST_PAYMENT_DATE,
    CASE WHEN P.COUNT_AS_ON_TIME = 'Y' THEN TRUE ELSE FALSE END AS COUNT_AS_ON_TIME,
    HMSG.RECEIVING_PERSON_ID AS AWARD_ACCEPTOR,
    HMSG.CREATION_DATE AS AWARD_ACCEPTED_DATE,
	CASE
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 6 AND (DATEDIFF(day,ORIG_REC.INITIAL_ACTIVATION_DATE,S.CREATION_DATE) < 15 and
                                                           ORIG_REC.INITIAL_ACTIVATION_DATE < '2008-02-01 00:00:00' AND
                                                           S.CREATION_DATE > '2007-02-01 00:00:00')
            THEN '100% Quick Draw'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 6 AND (DATEDIFF(day,ORIG_REC.INITIAL_ACTIVATION_DATE,S.CREATION_DATE) < 15 and
                                                           ORIG_REC.INITIAL_ACTIVATION_DATE > '2008-02-01 00:00:00' AND
                                                           ORIG_REC.INITIAL_ACTIVATION_DATE < '2010-07-24 00:00:00')
            THEN '97% Quick Draw'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 6 AND CT.CONTRACT_ID IS NOT NULL AND
             DATEDIFF(day,ORIG_REC.INITIAL_ACTIVATION_DATE,S.CREATION_DATE) > 14 AND CT.START_DATE < S.CREATION_DATE
            THEN 'Special Contract'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 24 THEN '97% Quick Draw'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 25 THEN 'Special Contract'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 26 THEN 'Employer Gets Discount'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 27 THEN 'Multi-fill Deal'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 29 THEN 'Payout Override'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 36 THEN 'Retained'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID IS NULL THEN 'Not Processed Yet'
        WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 40 THEN 'Split'
        ELSE
            CASE WHEN HIRE_TRANSACTION.TRANSACTION_TYPE_ID = 6 THEN 'Standard Terms'
                 ELSE 'Unknown'
                END
        END AS TYPE_OF_PLACEMENT,
	(SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT ELSE AE_IN.AMOUNT END)
        FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                 JOIN bounty_jobs.ACCOUNT A_IN ON A_IN.ID = AE_IN.ACCOUNT_ID
        WHERE A_IN.ACCOUNT_CHART_TYPE_ID = 10
          AND AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID
    ) AS BOUNTYJOBS_NET,
	(ROUND((SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT ELSE AE_IN.AMOUNT END)
            FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                     JOIN bounty_jobs.ACCOUNT A_IN ON A_IN.ID = AE_IN.ACCOUNT_ID
            WHERE A_IN.ACCOUNT_CHART_TYPE_ID = 10
              AND AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID) * (case when H.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end), 2)) AS BOUNTYJOBS_NET_USD_CONVERTED,
	(SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT  ELSE AE_IN.AMOUNT END)
        FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                 JOIN bounty_jobs.ACCOUNT A_IN ON AE_IN.ACCOUNT_ID = A_IN.ID
                 JOIN bounty_jobs.ACCOUNT_CHART_TYPE ACT_IN on A_IN.ACCOUNT_CHART_TYPE_ID = ACT_IN.ID AND ACT_IN.DISPLAY_FLAG = 'Y'
                 JOIN bounty_jobs.COMPANY C_IN ON C_IN.COMPANY_ID = A_IN.COMPANY_ID AND C_IN.COMPANY_TYPE_CODE = 'R'
        WHERE AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID
    ) AS RECRUITER_NET,
	(ROUND((SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT  ELSE AE_IN.AMOUNT END)
            FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                     JOIN bounty_jobs.ACCOUNT A_IN ON AE_IN.ACCOUNT_ID = A_IN.ID
                     JOIN bounty_jobs.ACCOUNT_CHART_TYPE ACT_IN on A_IN.ACCOUNT_CHART_TYPE_ID = ACT_IN.ID AND ACT_IN.DISPLAY_FLAG = 'Y'
                     JOIN bounty_jobs.COMPANY C_IN ON C_IN.COMPANY_ID = A_IN.COMPANY_ID AND C_IN.COMPANY_TYPE_CODE = 'R'
            WHERE AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID) * (case when H.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end), 2)) AS RECRUITER_NET_USD_CONVERTED,
	  (SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT  ELSE AE_IN.AMOUNT END)
        FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                 JOIN bounty_jobs.ACCOUNT A_IN ON AE_IN.ACCOUNT_ID = A_IN.ID
                 JOIN bounty_jobs.ACCOUNT_CHART_TYPE ACT_IN on A_IN.ACCOUNT_CHART_TYPE_ID = ACT_IN.ID AND ACT_IN.DISPLAY_FLAG = 'Y'
                 JOIN bounty_jobs.COMPANY C_IN ON C_IN.COMPANY_ID = A_IN.COMPANY_ID AND C_IN.COMPANY_TYPE_CODE = 'E'
        WHERE AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID
    ) AS EMPLOYER_NET,
	(ROUND((SELECT SUM(CASE WHEN A_IN.ACCOUNT_TYPE_CODE = 'D' THEN -AE_IN.AMOUNT  ELSE AE_IN.AMOUNT END)
            FROM bounty_jobs.ACCOUNT_ENTRY AE_IN
                     JOIN bounty_jobs.ACCOUNT A_IN ON AE_IN.ACCOUNT_ID = A_IN.ID
                     JOIN bounty_jobs.ACCOUNT_CHART_TYPE ACT_IN on A_IN.ACCOUNT_CHART_TYPE_ID = ACT_IN.ID AND ACT_IN.DISPLAY_FLAG = 'Y'
                     JOIN bounty_jobs.COMPANY C_IN ON C_IN.COMPANY_ID = A_IN.COMPANY_ID AND C_IN.COMPANY_TYPE_CODE = 'E'
            WHERE AE_IN.TRANSACTION_ID = HIRE_TRANSACTION.ID) * (case when H.CURRENCY_CODE = 'USD' then 1
    else (case when H.HIRE_DATE > CURRENT_DATE then 
      (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= COALESCE(JP.POSTING_EFFECTIVE_DATE, JP.CREATION_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  else
	  (case when H.CURRENCY_CODE = 'USD' then 1 else (SELECT CR.VALUE FROM bounty_jobs.CONVERSION_RATE CR
              WHERE CR.SOURCE_CURRENCY_CODE = UPPER(TRIM(H.CURRENCY_CODE))
                AND CR.TARGET_CURRENCY_CODE = UPPER(TRIM('USD'))
                AND CR.EFFECTIVE_DATE <= GREATEST(DATE_TRUNC('month', H.CREATION_DATE)::DATE,H.HIRE_DATE)
              ORDER BY CR.EFFECTIVE_DATE DESC LIMIT 1) end)
	  end ) end), 2)) AS EMPLOYER_NET_USD_CONVERTED,
	CASE WHEN HMC.PAYMENT_TERM <= 60 THEN DATEADD(day, 60, H.HIRE_DATE)
        ELSE DATEADD(day, HMC.PAYMENT_TERM, H.HIRE_DATE)
        END AS PAYMENT_DUE_DATE,
	CASE WHEN VC.contract_id IS NOT NULL THEN TRUE ELSE FALSE END AS vendor_type,
  	HMES.OFFER_ACCEPTED_DATE,
	P.INVOICE_ADDED_DATE AS "Invoice Added Date",
	CASE WHEN (SELECT SUM(TT.REVMOD) FROM bounty_jobs.TRANSACTION TT WHERE TT.SUBMISSION_ID = H.SUBMISSION_ID)>0 THEN 'TRUE' ELSE '' END AS "REVMOD"
FROM bounty_jobs.HIRE H
         JOIN bounty_jobs.SUBMISSION S ON H.SUBMISSION_ID = S.SUBMISSION_ID
         JOIN bounty_jobs.CANDIDATE C ON C.CANDIDATE_ID = S.CANDIDATE_ID
         JOIN bounty_jobs.RECRUITER REC ON REC.PERSON_ID = C.RECRUITER_PERSON_ID
         JOIN bounty_jobs.PERSON ORIG_REC ON ORIG_REC.PERSON_ID = REC.PERSON_ID
         JOIN bounty_jobs.JOB_POSTING JP ON JP.JOB_POSTING_ID = S.JOB_POSTING_ID
         JOIN bounty_jobs.PERSON HM ON HM.PERSON_ID = JP.HIRING_MANAGER_PERSON_ID
         JOIN bounty_jobs.COMPANY HMC ON HMC.COMPANY_ID = HM.COMPANY_ID -- ADDED THIS FOR BJ-8570
         JOIN bounty_jobs.COMPANY EMP_COMP ON EMP_COMP.COMPANY_ID = HM.COMPANY_ID
         JOIN bounty_jobs.COMPANY REC_COMP ON REC_COMP.COMPANY_ID = ORIG_REC.COMPANY_ID
         JOIN bounty_jobs.PAYMENT P ON P.HIRE_ID = H.HIRE_ID
         LEFT JOIN bounty_jobs.CONTRACT CT ON EMP_COMP.COMPANY_ID = CT.SOURCE_PARTY_ID
            AND (ORIG_REC.COMPANY_ID = CT.TARGET_PARTY_ID OR ORIG_REC.PERSON_ID = CT.TARGET_PARTY_ID)
            AND S.CREATION_DATE >= CT.START_DATE
            AND S.CREATION_DATE <= CT.END_DATE
		 LEFT JOIN bounty_jobs.CONTRACT VC ON HMC.COMPANY_ID   = VC.SOURCE_PARTY_ID
		 	AND VC.TARGET_PARTY_ID IN (REC.PERSON_ID, REC_COMP.COMPANY_ID)
   			AND H.HIRE_DATE  BETWEEN VC.START_DATE AND VC.END_DATE
         LEFT JOIN bounty_jobs.PAYMENT_STATUS PS ON PS.CODE = P.PAYMENT_STATUS
         LEFT JOIN bounty_jobs.AWARD_STATUS ASTAT ON ASTAT.CODE = P.AWARD_STATUS
         JOIN bounty_jobs.HIRE_MESSAGE HMES ON HMES.SUBMISSION_ID = H.SUBMISSION_ID
         LEFT JOIN bounty_jobs.ADDRESS ADDR ON HMES.WORKSITE_ADDRESS_ID = ADDR.ADDRESS_ID
         JOIN bounty_jobs.MESSAGE HMSG ON HMSG.PARENT_MESSAGE_ID = HMES.MESSAGE_ID
         JOIN bounty_jobs.HIRE_RESPONSE HRMSG ON HRMSG.MESSAGE_ID = HMSG.MESSAGE_ID AND HRMSG.HIRE_RESPONSE_TYPE_CODE = 'A'
         JOIN (				
             SELECT
					T.ID,
					T.TRANSACTION_TYPE_ID,
					T.SUBMISSION_ID AS SUBMISSION_ID
				FROM bounty_jobs.TRANSACTION T 
				JOIN (SELECT MAX(T.ID) AS ID, SUBMISSION_ID 
                        FROM bounty_jobs.TRANSACTION T 
                        WHERE T.TRANSACTION_TYPE_ID IN (6, 24, 25, 26, 27, 29, 36, 40) 
                        GROUP BY T.SUBMISSION_ID) SUBT ON SUBT.ID = T.ID 
                            AND SUBT.SUBMISSION_ID = T.SUBMISSION_ID
                ) HIRE_TRANSACTION ON HIRE_TRANSACTION.SUBMISSION_ID = H.SUBMISSION_ID
				limit 10